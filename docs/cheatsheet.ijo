#% ModuleName %#

#Struct {
    field: Type,
    otherField: Type
}

#function (externalParamName internalParamName: Type, param: Enum) -> String {
    ?(internalParamName.isTrue) {
        << "This evaluated to True"
    } ?() {
        << "This is an Else clause"
    }

    ~($i = 0; i < internalParamName.count; i++) {
        << "This is a loop: " + i
    }

    $string = ?|param| {
        .Value1: <- "I break out of the switch"
        .Value2: -> "I return from the function"
    }

    -> string
}

#constantTrue = :O
#constantFalse = :X

#assert @(param: Type) -> param == :O

#Array [String]

#HashMap <String, Int>

// Not sure about this one
#genericFunction (a: `T, b: `T) -> `T {
    -> a + b
}